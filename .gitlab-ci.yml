# You can also use the fallback image from docker hub: thorgate/django-template-base-ci:latest
image: registry.gitlab.com/thorgate-public/django-project-template/base-ci:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  POETRY_VIRTUALENVS_CREATE: "0"

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - poetry install
  - git config --global user.email "foo@bar.baz"
  - git config --global user.name "Foo Bar"
  # See the following issue for reasoning: https://gitlab.com/gitlab-org/gitlab-ce/issues/41227
  - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
  - export TPL_PLAYGROUND="${SHARED_PATH}/tpl-playground"
  - mkdir -p $TPL_PLAYGROUND

stages:
  - test
  # Since CI image publish job only runs from protected branches then new changes to CI
  #  docker image must be introduced separately from other features. We could move it
  #  to be the first stage but that would only work for changes merged into the main
  #  branches.
  #
  # Note: When you do change the order here consider that:
  # - publish-ci-image.sh always tags the image as latest
  # - you might need to run publish_ci_image for all branches
  - publish_ci_image

test_main:
  stage: test
  except:
    - schedules
  script:
    - pytest -E main --maxfail=1 -v

test_CELERY:
  stage: test
  except:
    - schedules
  script:
    - pytest -E CELERY --maxfail=1 -v

test_STORYBOOK:
  stage: test
  except:
    - schedules
  script:
    - pytest -E STORYBOOK --maxfail=1 -v

test_SPA:
  stage: test
  except:
    - schedules
  script:
    - pytest -E SPA --maxfail=1 -v

test_frontend_codemods:
  stage: test
  image: node:12
  except:
    - schedules
  before_script: []
  cache:
    key:
      files:
        - codemods/frontend/package.json
    paths:
      - codemods/frontend/node_modules
  script:
    - cd codemods/frontend
    - yarn install
    - yarn test

publish_ci_image:
  stage: publish_ci_image
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add bash
  only:
    - master
    - spa
    - schedules
  script:
    - ./utils/publish-ci-image.sh ci Dockerfile-ci

publish_base_ci_image:
  stage: publish_ci_image
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add bash
  only:
    - master
    - spa
    - schedules
  script:
    - ./utils/publish-ci-image.sh base-ci Dockerfile-base-ci
