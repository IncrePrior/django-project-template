- name: "Extract settings from container"
  import_tasks: ../../helpers/run-management-command.yml
  vars:
    command_params: "settings --keys AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_STORAGE_BUCKET_NAME GS_BUCKET_NAME GS_PROJECT_ID GS_CREDENTIALS"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- name: "Store settings as json {{ "{{ result.stdout }}" }}"
  set_fact:
    settings: "{{ "{{ result.stdout | from_json }}" }}"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- set_fact:
    media_backend: "FS"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- set_fact:
    media_backend: "S3"
  when: "settings.AWS_ACCESS_KEY_ID and settings.AWS_ACCESS_KEY_ID != '<unset>'"
  ignore_errors: yes
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- set_fact:
    media_backend: "GCS"
  when: "settings.GS_PROJECT_ID and settings.GS_PROJECT_ID != '<unset>'"
  ignore_errors: yes
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- name: "Fail if media mirroring is not supported for backend"
  fail:
    msg: "Media backend {{ "{{ media_backend }}" }} does not have logic for mirroring"
  when: "media_backend == 'GCS'"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- name: "Fail if media mirroring is not supported for backend"
  fail:
    msg: "Media backend {{ "{{ media_backend }}" }} does not have logic for mirroring"
  when: "media_backend == 'S3'"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- name: "Install yq on the server"
  pip:
    name: "yq"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- name: "Figure out the local media directory"
  shell: "docker-compose -f {{ "{{ compose_file }}" }} config | yq -r '.services.django.volumes[]' | grep '/files/media' | cut -d: -f1"
  vars:
    ansible_become: no
  register: "media_directory"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"


- name: "Mirror FS media files"
  import_tasks: clone_media_source_FS.yml
  when: "media_backend == 'FS'"
  delegate_to: "{{ "{{ source_host | mandatory }}" }}"
